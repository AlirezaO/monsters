{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","extext","imgsrc","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAAe,I,wBCGFA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAY,iBAAjB,UAGI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCNKC,EAAW,SAAAR,GACY,OAAO,qBAAKC,UAAU,YAAf,SACMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJ1DM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,uBAEIZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MC4DJG,E,kDA7Db,aAAc,IAAD,8BACX,gBAmBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlBrC,EAAKC,MAAQ,CACXC,OAAS,cACTC,OAAS,6EACTf,SAAW,GACXU,YAAY,IAPH,E,qDAYb,WAAoB,IAAD,OACjBM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACT,SAAUoB,S,oBAQ1C,WAAQ,MAG2BC,KAAKR,MAA/Bb,EAHD,EAGCA,SAAWU,EAHZ,EAGYA,YACZY,EAAmBtB,EAASuB,QAAO,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASf,EAAYc,kBAEpG,OACI,sBAAKhC,UAAU,MAAf,UAEI,oDAGA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAgBiB,KAAKjB,eAGvB,cAAC,EAAD,CAAUJ,SAAUsB,W,GA1CdI,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fd7b32f4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className = 'card-container'>\r\n        \r\n        {/* {<img alt=\"monster\" src={'https://robohash.org/X4E.png?set=set1&size=180x180'}/>} */}\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        {/* <h3> {props.monster.id} </h3> */}\r\n        <h2> {props.monster.name} </h2>\r\n        <p> {props.monster.email} </p>\r\n\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component'\r\n\r\nexport const CardList = props =>{                     \r\n                                    return <div className='card-list' > \r\n                                                {props.monsters.map(monster => (\r\n                                                    <Card key={monster.id} monster={monster}/>\r\n                                                ))} \r\n                                            </div> \r\n                                };","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n\r\n    <input\r\n\r\n        className='search'\r\n        type='search' \r\n        placeholder= {placeholder} \r\n        onChange= {handleChange}\r\n\r\n    />\r\n   \r\n )","import logo from './logo.svg';\nimport './App.css';\nimport React ,{Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\n\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      extext : 'Hello React',\n      imgsrc : 'https://cdn.pixabay.com/photo/2016/02/05/13/11/fairy-tale-1180921__340.png',\n      monsters : [],\n      searchField:''\n\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    //.then(x => console.log(x))\n    .then(users => this.setState({monsters: users}))\n  }\n\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render(){\n\n    //Searching method\n    const {monsters , searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return(\n        <div className=\"App\">\n\n            <h1> Monsters Rolodex </h1>\n\n            {/* make search Field bellow */}\n            <SearchBox\n              placeholder='search monsters'\n              handleChange = {this.handleChange}\n            />\n\n            <CardList monsters={filteredMonsters}/>\n              \n\n\n\n            {/* <img src = {this.state.imgsrc}/>\n            <p>\n              {this.state.extext}\n            </p>\n            <button onClick={() => this.setState(\n                                                  {extext : \"yo React\",\n                                                   imgsrc : \"https://cdn.pixabay.com/photo/2017/11/15/09/28/music-player-2951399__340.jpg\"\n                                                  }\n                                                )\n                            }> butt </button> */}\n        </div>\n    ); \n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}